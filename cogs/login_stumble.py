import requests,json,hashlib,time as tm
from time import time 
import discord,platform,os
from discord.ext import commands
from discord.ui import Button, View

#carregar variaveis env 
from dotenv import load_dotenv
load_dotenv()

RANKING = os.getenv('rank_highscoreBR')
PATH_COGS = os.getenv('path_accounts')
USER_LOGIN = os.getenv('user_login')
KEY = os.getenv('key')
KEY_LOGIN = os.getenv('key_login')
ROUND_PLAY = os.getenv('roundplay_finish')
PATH_COGS = os.getenv('path_accounts')



GEMS_1 = os.getenv('economy_gems')
GEMS_CHARGE = os.getenv('economy_charge')
GEMS_MENU = os.getenv('economy_menu')
GEMS_ROD = os.getenv('economy_rode')


#-----------------------

#-----------------------



class Ranking(commands.Cog):
    def __init__(self,bot):
        self.bot = bot

    @commands.command()
    async def menu(self, ctx):
        emb = discord.Embed(title=self.bot.user.name, description=None, color=0xA020F0)
        emb.set_thumbnail(url="https://i.pinimg.com/564x/7c/e1/fe/7ce1feb183febb3dfbd56753b1f1cea9.jpg")
        emb.add_field(name="Sistema üíª",value=f"‚óâ{platform.system()} {platform.release()}", inline=True)
        emb.add_field(name="Vers√£o do sistema üíΩ",value=f"‚óâ{platform.version()}", inline=True)
        emb.add_field(name="Fun√ß√µes ‚õìÔ∏è",value="‚óâObter gemas em um intervalo de tempo\n‚óâJogar automaticamente partidas", inline=True)
        emb.set_footer(text=f"{self.bot.user.name} - Account Management - Por Dasw", icon_url='https://i.pinimg.com/564x/7c/e1/fe/7ce1feb183febb3dfbd56753b1f1cea9.jpg')
        
        button1 = Button(label="Op√ß√µes", style=discord.ButtonStyle.green, emoji="‚öôÔ∏è", disabled=False)
        button2 = Button(label="Contas", style=discord.ButtonStyle.green, emoji="üõ†Ô∏è", disabled=False)
        button3 = Button(label="Informa√ß√µes internas", style=discord.ButtonStyle.green, emoji="‚ô®Ô∏è", disabled=False)
        button4 = Button(label="Ranking", style=discord.ButtonStyle.green, emoji="‚ô®Ô∏è", disabled=False)

        async def button_cmds(interaction):
            button_rank = Button(label="Retornar", style=discord.ButtonStyle.green, emoji="ü§ñ", disabled=False)
            view_rank = View(timeout=None)
            button_rank.callback = retornar_callback
            view_rank.add_item(button_rank)
            
            emb = discord.Embed(title=f"{self.bot.user.name} - Op√ß√µes", description=f"Comandos:\n‚óâ **>play** *`[numero da conta]`*(pode ser visto na aba conta) *`[rounds]`*\n**Exemplo:** >play 1 10\n\n‚óâ **>setar** *`[intervalo de horas para obter gemas e skins]`*\n**Exemplo:** >setar 2hr\n\n‚óâ **>info** *`[numero da conta]`*\n**Exemplo:** >info 1\n‚óâ **>nick** *`[numero da conta] [nome]`*\n**Exemplo:** >nick 3 {self.bot.user.name}\n+twitter [link do post do video que voc√™ quer baixar]", color=0xA020F0)
            emb.set_thumbnail(url="https://i.pinimg.com/564x/7c/e1/fe/7ce1feb183febb3dfbd56753b1f1cea9.jpg")
            emb.set_footer(text=f"{self.bot.user.name} - Account Management - Por Dasw", icon_url='https://i.pinimg.com/564x/7c/e1/fe/7ce1feb183febb3dfbd56753b1f1cea9.jpg')
    
            await interaction.response.edit_message(content=None, embed=emb, view=view_rank)
        
        async def button_envs(interaction):
            emb = discord.Embed(title="Stumble Guys", description="‚ùó**Informa√ß√µes armazenadas e utilizadas pelo o bot em .env, favor n√£o mostrar**‚ùó", color=0xA020F0)
            emb.set_thumbnail(url="https://i.pinimg.com/564x/7c/e1/fe/7ce1feb183febb3dfbd56753b1f1cea9.jpg")
            emb.add_field(name="Vers√£o",value=f"0.37", inline=False)
            emb.add_field(name="Api para login",value=f"||`{USER_LOGIN}`||", inline=False)
            emb.add_field(name="Api rank",value=f"||`{RANKING}`||", inline=False)
            emb.add_field(name="HashSALT_CODE_REQUESTS",value=f"||`{KEY}`||\n||`auth = hashstumble(AUTH,path_da_api)`||", inline=False)
            emb.add_field(name="HashSALT_LOGIN_REQUESTS",value=f"||`{KEY_LOGIN}`||", inline=False)
            emb.add_field(name="Gemas e skins",value=f"`{GEMS_1}\n{GEMS_CHARGE}\n{GEMS_MENU}\n{GEMS_ROD}BAU['Quantidade_bau']`", inline=False)
            emb.set_image(url="https://media.discordapp.net/attachments/739575553253834754/1050500255684247552/image.png?width=806&height=181")
            emb.set_footer(text=f"{self.bot.user.name} - Account Management - Por Dasw", icon_url='https://i.pinimg.com/564x/7c/e1/fe/7ce1feb183febb3dfbd56753b1f1cea9.jpg')

            button_rank = Button(label="Retornar", style=discord.ButtonStyle.green, emoji="ü§ñ", disabled=False)
            view_rank = View(timeout=None)
            button_rank.callback = retornar_callback
            view_rank.add_item(button_rank)

            await interaction.response.edit_message(content="‚ùó**POR FAVOR N√ÉO MOSTRAR ESSAS INFORMA√á√ïES**‚ùó", embed=emb, view=view_rank)
        

        async def button_highscore(interaction):

            button_rank = Button(label="Retornar", style=discord.ButtonStyle.green, emoji="ü§ñ", disabled=False)
            view_rank = View(timeout=None)
            button_rank.callback = retornar_callback
            view_rank.add_item(button_rank)


            headers = {
            'Content-Type': 'application/json',
            'use_response_compression': 'true',
            'Host': 'api.stumbleguys.com:443',}
            r = requests.get("https://api.stumbleguys.com/highscore/rank/list?start=0&count=100&country=BR", headers=headers).json()['scores']

            players = [f"{player['User']['Username']}üî∫`{str(player['User']['SkillRating'])}`"  for player in r]

            Players_brasil = "\n".join([f"**{n+1}. {players[n].replace('SX`','SX')} üèÜ**" for n in range(1,100)])
            
            Ranking_Brasil_Info = discord.Embed(title="Ranking Brasil üáßüá∑", description=Players_brasil)
            Ranking_Brasil_Info.set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/197/197386.png")
            Ranking_Brasil_Info.set_footer(text=f"{self.bot.user.name} - Account Management - Por Dasw", icon_url='https://i.pinimg.com/564x/7c/e1/fe/7ce1feb183febb3dfbd56753b1f1cea9.jpg')

            await interaction.response.edit_message(content=f"üèÜ Jogador em primeiro lugar: **{players[0]}** üèÜ", view=view_rank, embed=Ranking_Brasil_Info)
        

        async def button_accounts(interaction):
            button_rank = Button(label="Retornar", style=discord.ButtonStyle.green, emoji="ü§ñ", disabled=False)
            view_rank = View(timeout=None)
            button_rank.callback = retornar_callback
            view_rank.add_item(button_rank)

            json_contas = open(PATH_COGS,"r")
            contas = json.load(json_contas)  

            contas_info = [f"**Usu√°rio(n√£o √© o nickname)**: {conta['Usuario']}\n**ID**: ||{conta['Id']}||\n**Dispositivo**: ||{conta['DeviceId']}||\n**Google**: ||'{conta['GoogleId']}'||\n**Facebook**: ||'{conta['FacebookId']}'||\n**Rodando na vers√£o**: ||{conta['Version']}||\n"  for conta in contas['contas']]
            contas_trans = "\n".join([f"**{n+1}.**ü§ñ\n{contas_info[n]}" for n in range(len(contas_info))])

            json_contas.close()
            contas_embed = discord.Embed(title="Contas ", description=contas_trans, color=0xf1c40f)
            contas_embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/890792832208617485/1028331427374301336/account.png")
            contas_embed.set_footer(text=f"{self.bot.user.name} - Account Management - Por Dasw", icon_url='https://i.pinimg.com/564x/7c/e1/fe/7ce1feb183febb3dfbd56753b1f1cea9.jpg')

            await interaction.response.edit_message(embed=contas_embed, view=view_rank)
        


        async def retornar_callback(interaction):
            await interaction.response.edit_message(content=None,embed=emb, view=view)


    
        button1.callback = button_cmds
        button2.callback = button_accounts
        button3.callback = button_envs
        button4.callback = button_highscore
        
        view = View(timeout=None)
        view.add_item(button1)
        view.add_item(button2)
        view.add_item(button3)
        #view.add_item(button4)
    
        await ctx.send(embed=emb,view=view)


async def setup(bot):
    await bot.add_cog(Ranking(bot))
